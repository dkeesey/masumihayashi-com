---
import { getCollection } from "astro:content";
import type { CollectionEntry } from "astro:content";
import ArtworkDetailLayout from "../../../layouts/ArtworkDetailLayout.astro";
import RelatedArtworks from "../../../components/RelatedArtworks.astro";

export async function getStaticPaths() {
  const artworkEntries = await getCollection("artwork");
  const sacredArchitecturesArtworks = artworkEntries.filter(
    (entry: CollectionEntry<"artwork">) =>
      entry.data.series === "Sacred Architectures"
  );

  return sacredArchitecturesArtworks.map((entry: CollectionEntry<"artwork">) => ({
    params: { slug: entry.slug },
    props: { entry },
  }));
}

const { entry }: { entry: CollectionEntry<"artwork"> } = Astro.props;

// Fetch related artworks from Sacred Architectures series first, then fill with other series if needed
const allArtworks = await getCollection("artwork");

// Get artworks from same series (excluding current)
const sameSeriesWorks = allArtworks
  .filter((art) =>
    art.data.series === "Sacred Architectures" &&
    art.slug !== entry.slug
  );

// If fewer than 4 from same series, fill in with artworks from other series
let relatedWorks = [...sameSeriesWorks];
if (relatedWorks.length < 4) {
  const otherSeriesWorks = allArtworks
    .filter((art) =>
      art.data.series !== "Sacred Architectures" &&
      art.slug !== entry.slug
    );
  relatedWorks = [...relatedWorks, ...otherSeriesWorks].slice(0, 6);
} else {
  relatedWorks = relatedWorks.slice(0, 6);
}
---

<ArtworkDetailLayout entry={entry} galleryPath="/artwork/sacred-architectures/">
  <!-- Related Artworks Component -->
  {relatedWorks.length > 0 && (
    <RelatedArtworks
      artworks={relatedWorks}
      seriesName={
        relatedWorks.length === sameSeriesWorks.length && relatedWorks.length > 0
          ? "Sacred Architectures"
          : "Our Collection"
      }
      seriesPath="/artwork/sacred-architectures"
      maxItems={6}
    />
  )}
</ArtworkDetailLayout>
